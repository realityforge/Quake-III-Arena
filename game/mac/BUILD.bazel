# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@build_bazel_rules_apple//apple:macos.bzl", "macos_application")
load("@build_bazel_rules_apple//apple:versioning.bzl", "apple_bundle_version")
load("//build_defs:copy_to_directory.bzl", _copy_to_directory = "copy_to_directory")

# A version scheme that parses version information out of the build
# label and uses a fallback for developers' builds. For example, the
# following command
#
#    bazel build //game/mac:Quake3Arena.zip --embed_label=Quake3Arena_1.2_build_345
#
# would yield the Info.plist values:
#
#    CFBundleVersion = "1.2.345"
#    CFBundleShortVersionString = "1.2"
#
# and the development builds using the command:
#
#    bazel build //game/mac:Quake3Arena.zip
#
# would yield the values:
#
#    CFBundleVersion = "99.99.99"
#    CFBundleShortVersionString = "99.99"
#
apple_bundle_version(
    name = "build_label_version",
    build_label_pattern = "Quake3Arena_{version}_build_{build}",
    build_version = "{version}.{build}",
    capture_groups = {
        "version": "\\d+\\.\\d+",
        "build": "\\d+",
    },
    fallback_build_label = "Quake3Arena_99.99_build_99",
    short_version_string = "{version}",
)

_copy_to_directory(
    name = "baseq3_code",
    srcs = [
        "//game/baseq3:cgame.so",
        "//game/baseq3:qagame.so",
        "//game/baseq3:ui.so",
    ],
    allow_symlink = True,
    replace_prefixes = {
        "cgame": "baseq3/cgamearm64",
        "qagame": "baseq3/qagamearm64",
        "ui": "baseq3/uiarm64",
    },
)

_copy_to_directory(
    name = "teamarena_code",
    srcs = [
        "//game/teamarena:cgame.so",
        "//game/teamarena:qagame.so",
        "//game/teamarena:ui.so",
    ],
    allow_symlink = True,
    replace_prefixes = {
        "cgame": "missionpack/cgamearm64",
        "qagame": "missionpack/qagamearm64",
        "ui": "missionpack/uiarm64",
    },
)

# This target is a WIP and as we do not currently use it, the work has stopped on it
# The application *should* bundle the SDL framework or maybe we should inline the SDL
# source into our build. Then when building it we would need to run
#
#   $ bazel build //game/mac:Quake3Arena.zip --embed_label=Quake3Arena_1.2_build_345
macos_application(
    name = "Quake3Arena",
    additional_contents = {
        "//game:Quake3ArenaServer": "MacOS",
        ":baseq3_code": "MacOS",
        ":teamarena_code": "MacOS",

        # Application Icons
        ":Quake3Arena.icns": "Resources",

        # Data files can not be below MacOS directory as the code signing process will expect it to be
        # code and thus must have a signature. Which it obviously does not. This places it at a different
        # location in which arbitrary resources can be stored.
        # See https://developer.apple.com/library/archive/technotes/tn2206/_index.html for further details.
        "//game/baseq3:pak0.pk3": "Resources/baseq3",
        "//game/teamarena:pak0.pk3": "Resources/missionpack",
    },
    # TODO: Name this bundle id according to final product name
    bundle_id = "org.realityforge.Quake3Arena",
    # allows for unsigned executable memory in hardened runtime
    entitlements = ":Quake3Arena.entitlements",
    infoplists = [":Info.plist"],
    minimum_os_version = "10.11",
    tags = ["manual"],
    version = ":build_label_version",
    deps = ["//code/client:clientexe"],
)
