cc_library(
    name = "local",
    srcs = [
        "tr_extramath.h",
        "tr_extratypes.h",
        "tr_postprocess.h",
    ],
    hdrs = [
        "tr_fbo.h",
        "tr_local.h",
    ],
    includes = ["."],
    deps = [
        "//code/qcommon",
        "//code/qcommon:qfiles",
        "//code/renderercommon",
    ],
)

cc_library(
    name = "renderergl2",
    srcs = [
        "tr_animation.c",
        "tr_backend.c",
        "tr_bsp.c",
        "tr_cmds.c",
        "tr_curve.c",
        "tr_dsa.c",
        "tr_dsa.h",
        "tr_extensions.c",
        "tr_extramath.c",
        "tr_fbo.c",
        "tr_flares.c",
        "tr_glsl.c",
        "tr_image.c",
        "tr_image_dds.c",
        "tr_init.c",
        "tr_light.c",
        "tr_main.c",
        "tr_marks.c",
        "tr_mesh.c",
        "tr_model.c",
        "tr_model_iqm.c",
        "tr_postprocess.c",
        "tr_scene.c",
        "tr_shade.c",
        "tr_shade_calc.c",
        "tr_shader.c",
        "tr_shadows.c",
        "tr_sky.c",
        "tr_surface.c",
        "tr_vbo.c",
        "tr_world.c",
    ],
    includes = ["."],
    visibility = ["//code/client:__pkg__"],
    deps = [
        ":local",
        "//code/qcommon",
        "//code/qcommon:qfiles",
        "//code/renderercommon",
        "//code/renderergl2/glsl",
        "//third_party/json",
    ],
)

cc_library(
    name = "tr_subs",
    srcs = [
        "tr_subs.c",
    ],
    includes = ["."],
    deps = [
        ":local",
        "//code/qcommon",
        "//code/qcommon:qfiles",
        "//code/renderercommon",
    ],
)

# The Makefile variant actually creates .dylib under OSX. The Mach-O object file format used
# by Mac OS X for executables and libraries distinguishes between shared libraries and dynamically
# loaded modules. See https://stackoverflow.com/questions/2339679/what-are-the-differences-between-so-and-dylib-on-macos
#
# We could maintain this by using rules_apple ala https://github.com/bazelbuild/rules_apple/blob/master/doc/rules-macos.md#macos_dylib
# but given that the renderer will eventually be inlined into main application AND is a dynamically loaded
# module anyway, it makes sense to not create dylibs
#
cc_binary(
    name = "librenderergl2",
    linkshared = 1,
    deps = [
        ":renderergl2",
        ":tr_subs",
        "//code/renderergl2/glsl",
    ],
)
