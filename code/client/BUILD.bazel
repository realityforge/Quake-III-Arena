load("//build_defs:rules.bzl", "ENGINE_DEFINES")

cc_library(
    name = "client",
    srcs = [
        "cl_avi.c",
        "cl_cgame.c",
        "cl_cin.c",
        "cl_console.c",
        "cl_input.c",
        "cl_keys.c",
        "cl_main.c",
        "cl_net_chan.c",
        "cl_parse.c",
        "cl_scrn.c",
        "cl_ui.c",
    ],
    defines = ["USE_VOIP"],
    deps = [
        ":api",
        ":snd_api",
        ":snd_internal_api",
        "//code/botlib:api",
        "//code/cgame:api",
        "//code/game:bg_api",
        "//code/qcommon",
        "//code/renderercommon:api",
        "//code/sys:main",
        "//code/sys:sys_local",
        "//code/ui:api",
    ],
)

cc_library(
    name = "curl",
    srcs = [
        "cl_curl.c",
    ],
    hdrs = [
        "cl_curl.h",
    ],
    defines = ["USE_CURL"],
    deps = [
        ":api",
        "//code/cgame:api",
        "//code/game:bg_api",
        "//code/qcommon",
        "//code/renderercommon:api",
        "//code/ui:api",
    ],
)

cc_library(
    name = "api",
    srcs = [
        "keys.h",
    ],
    hdrs = [
        "client.h",
        "keycodes.h",
    ],
    defines = ["USE_VOIP"] + ENGINE_DEFINES,
    visibility = [
        "//code/q3_ui:__pkg__",
        "//code/sdl:__pkg__",
        "//code/sys:__pkg__",
        "//code/ui:__pkg__",
    ],
    deps = [
        ":snd_api",
        "//code/cgame:api",
        "//code/game:bg_api",
        "//code/qcommon",
        "//code/renderercommon:api",
        "//code/ui:api",
        "//third_party/opus",
    ],
)

cc_library(
    name = "snd_api",
    hdrs = [
        "snd_public.h",
    ],
    visibility = ["//code/sdl:__pkg__"],
    deps = [
        "//code/qcommon:shared_api",
    ],
)

cc_library(
    name = "snd_internal_api",
    hdrs = [
        "snd_local.h",
    ],
    visibility = ["//code/sdl:__pkg__"],
    deps = [
        ":snd_api",
        "//code/qcommon",
        "//code/qcommon:shared_api",
    ],
)

cc_library(
    name = "snd_codec_api",
    hdrs = [
        "snd_codec.h",
    ],
    defines = [
        "USE_CODEC_OPUS",
        "USE_CODEC_VORBIS",
    ],
    deps = [
        "//code/qcommon",
        "//code/qcommon:shared_api",
        "//third_party/opus",
        "//third_party/vorbis",
    ],
)

cc_library(
    name = "snd_codec",
    srcs = [
        "snd_codec.c",
        "snd_codec_ogg.c",
        "snd_codec_opus.c",
        "snd_codec_wav.c",
    ],
    deps = [
        ":api",
        ":snd_codec_api",
        "//code/qcommon",
        "//code/qcommon:shared_api",
        "//third_party/opus",
        "//third_party/opusfile",
        "//third_party/vorbis",
    ],
)

cc_library(
    name = "snd",
    srcs = [
        "snd_adpcm.c",
        "snd_dma.c",
        "snd_main.c",
        "snd_mem.c",
        "snd_mix.c",
        "snd_wavelet.c",
    ],
    deps = [
        ":api",
        ":snd_codec_api",
        ":snd_internal_api",
        "//code/qcommon",
        "//code/qcommon:shared_api",
    ],
)

cc_library(
    name = "openal_support",
    srcs = [
        "qal.c",
        "qal.h",
        "snd_openal.c",
    ],
    defines = ["USE_OPENAL"],
    deps = [
        ":api",
        ":snd_api",
        ":snd_codec_api",
        ":snd_internal_api",
        "//code/qcommon",
        "//code/qcommon:shared_api",
        "//third_party/openal",
    ],
)

_CLIENT_EXE_DEPS = [
    ":client",
    ":openal_support",
    ":snd",
    ":snd_codec",
    "//code/server",
    "//code/qcommon:cm",
    "//code/qcommon:cmd",
    "//code/qcommon:common",
    "//code/botlib",
    "//code/sys:main",
    # This next two should be conditional on operating system
    "//code/sys:sys_osx",
    "//code/sys:sys_unix",
    "//code/sys:sys_local",
    "//code/qcommon:cvar",
    "//code/qcommon:files",
    "//code/qcommon:net",
    "//third_party/unzip",
    "//code/qcommon:vm",
    "//code/sdl:sdl_input",
    "//code/sdl:sdl_renderer",
    "//code/sdl:sdl_snd",
    "//third_party/opus",
    "//third_party/sdl",
    "//code/renderergl2",
]

cc_library(
    name = "clientexe",
    deps = _CLIENT_EXE_DEPS,
)
)
